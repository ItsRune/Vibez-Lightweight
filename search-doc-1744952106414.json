{"searchDocs":[{"title":"Result","type":0,"sectionRef":"#","url":"/Vibez-Ranking/api/Result","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#functions","content":" ","version":null,"tagName":"h2"},{"title":"ok​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#ok","content":"&lt;/&gt; Result:ok(item: T) → Result&lt;T,E&gt;   ","version":null,"tagName":"h3"},{"title":"err​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#err","content":"&lt;/&gt; Result:err(err: E) → Result&lt;T,E&gt;   ","version":null,"tagName":"h3"},{"title":"try​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#try","content":"&lt;/&gt; Result:try(fn: () → T) → Result&lt;T,E&gt;   ","version":null,"tagName":"h3"},{"title":"isOk​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#isOk","content":"&lt;/&gt; Result:isOk() → boolean   ","version":null,"tagName":"h3"},{"title":"isErr​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#isErr","content":"&lt;/&gt; Result:isErr() → boolean   ","version":null,"tagName":"h3"},{"title":"inspect​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#inspect","content":"&lt;/&gt; Result:inspect(fn: (ok: T) → ()) → Result&lt;T,E&gt;   ","version":null,"tagName":"h3"},{"title":"inspectErr​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#inspectErr","content":"&lt;/&gt; Result:inspectErr(fn: (err: E) → ()) → Result&lt;T,E&gt;   ","version":null,"tagName":"h3"},{"title":"match<O>​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#match<O>","content":"&lt;/&gt; Result:match&lt;O&gt;( ok: (ok: T) → O, err: (err: E) → O ) → O   ","version":null,"tagName":"h3"},{"title":"map​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#map","content":"&lt;/&gt; Result:map(fn: (ok: T) → T) → Result&lt;T,E&gt;   ","version":null,"tagName":"h3"},{"title":"mapErr​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#mapErr","content":"&lt;/&gt; Result:mapErr(fn: (err: E) → E) → Result&lt;T,E&gt;   ","version":null,"tagName":"h3"},{"title":"mapOr​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#mapOr","content":"&lt;/&gt; Result:mapOr( fn: (ok: T) → T, alt: T ) → Result&lt;T,E&gt;   ","version":null,"tagName":"h3"},{"title":"mapOrElse​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#mapOrElse","content":"&lt;/&gt; Result:mapOrElse( mapFn: (ok: T) → T, elseFn: () → T ) → Result&lt;T,E&gt;   ","version":null,"tagName":"h3"},{"title":"unwrap​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#unwrap","content":"&lt;/&gt; Result:unwrap() → T   ","version":null,"tagName":"h3"},{"title":"unwrapErr​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#unwrapErr","content":"&lt;/&gt; Result:unwrapErr() → E   ","version":null,"tagName":"h3"},{"title":"unwrapOr​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#unwrapOr","content":"&lt;/&gt; Result:unwrapOr(alt: T) → T   ","version":null,"tagName":"h3"},{"title":"unwrapOrElse​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#unwrapOrElse","content":"&lt;/&gt; Result:unwrapOrElse(fn: () → T) → T   ","version":null,"tagName":"h3"},{"title":"expect​","type":1,"pageTitle":"Result","url":"/Vibez-Ranking/api/Result#expect","content":"&lt;/&gt; Result:expect(fn: () → T) → T  ","version":null,"tagName":"h3"},{"title":"Ranking","type":0,"sectionRef":"#","url":"/Vibez-Ranking/api/Ranking","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#types","content":" ","version":null,"tagName":"h2"},{"title":"errorKind​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#errorKind","content":"&lt;/&gt; type errorKind = string | Result&lt;any,string&gt;   ","version":null,"tagName":"h3"},{"title":"BaseHttpResponse​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#BaseHttpResponse","content":"&lt;/&gt; type BaseHttpResponse = Result&lt;any,any&gt;   ","version":null,"tagName":"h3"},{"title":"GroupIdResponse​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#GroupIdResponse","content":"&lt;/&gt; type GroupIdResponse = number   ","version":null,"tagName":"h3"},{"title":"BlacklistResponse​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#BlacklistResponse","content":"&lt;/&gt; type BlacklistResponse = { success: boolean, data: {[string]: any} }   ","version":null,"tagName":"h3"},{"title":"SaveUserActivityResponse​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#SaveUserActivityResponse","content":"&lt;/&gt; type SaveUserActivityResponse = { detailedLogs: {{ timestampLeftAt: number, secondsUserHasSpent: number, messagesUserHasSent: number }?}, messagesUserHasSent: number, secondsUserHasSpent: number }   ","version":null,"tagName":"h3"},{"title":"FetchUserActivityResponse​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#FetchUserActivityResponse","content":"&lt;/&gt; type FetchUserActivityResponse = { success: boolean, userId: number?, secondsUserHasSpent: number, messagesUserHasSent: number, detailedLogs: {{ timestampLeftAt: number, secondsUserHasSpent: number, messagesUserHasSent: number }} }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#properties","content":" ","version":null,"tagName":"h2"},{"title":"GroupId​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#GroupId","content":"&lt;/&gt; Ranking.GroupId: Number  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#new","content":"&lt;/&gt; Ranking.new(apiKey: string) → Ranking Constructs a new Vibez wrapper with the specified key.  ","version":null,"tagName":"h3"},{"title":"getGroupId​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#getGroupId","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Ranking:getGroupId() → number Fetches the group associated with the api key.  ","version":null,"tagName":"h3"},{"title":"setRank​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#setRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Ranking:setRank( self: Ranking, User: Player | string | number, whoCalled: { userName: string, userId: number }? ) → SetRankResponse ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#SetRankResponse","content":"type SetRankResponse = { success: boolean, message: string?, data: { newRank: { id: number, name: string, rank: number, memberCount: number, }, oldRank: { id: number, name: string, rank: number, groupInformation: { id: number, name: string, memberCount: number, hasVerifiedBadge: boolean } } } }  Sets the rank of a player and whoCalled (Optional) is used for logging purposes.  ","version":null,"tagName":"h3"},{"title":"Promote​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#Promote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Ranking:Promote( self: Ranking, User: Player | string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Promotes a player and whoCalled (Optional) is used for logging purposes.  ","version":null,"tagName":"h3"},{"title":"Demote​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#Demote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Ranking:Demote( self: Ranking, User: Player | string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Demotes a player and whoCalled (Optional) is used for logging purposes.  ","version":null,"tagName":"h3"},{"title":"Fire​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#Fire","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Ranking:Fire( self: Ranking, User: Player | string | number, whoCalled: { userName: string, userId: number }? ) → rankResponse Fires a player and whoCalled (Optional) is used for logging purposes.  ","version":null,"tagName":"h3"},{"title":"getActivity​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#getActivity","content":"since 0.3.0 &lt;/&gt; Ranking:getActivity( User: Player | string | number, sorted: boolean?-- Only when fetching all user activities. ) → activityResponse Gets a player's or everyone's current activity  ","version":null,"tagName":"h3"},{"title":"removeActivity​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#removeActivity","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 0.11.0 &lt;/&gt; Ranking:removeActivity(User: Player | string | number) → boolean Negates the player's activity seconds &amp; message counts. (Does not clear detail logs array.)  ","version":null,"tagName":"h3"},{"title":"saveActivity​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#saveActivity","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields since 0.3.0 &lt;/&gt; Ranking:saveActivity( User: Player | string | number, userRank: number, secondsSpent: number, messagesSent: (number | {string})?, shouldFetchGroupRank: boolean? ) → httpResponse Saves the player's current activity  ","version":null,"tagName":"h3"},{"title":"addBlacklist​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#addBlacklist","content":"since 0.6.0 &lt;/&gt; Ranking:addBlacklist( userToBlacklist: (Player string | number), Reason: string?, blacklistExecutedBy: (Player string | number)? ) → blacklistResponse Adds a blacklist to your api key.  ","version":null,"tagName":"h3"},{"title":"deleteBlacklist​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#deleteBlacklist","content":"since 0.6.0 &lt;/&gt; Ranking:deleteBlacklist(userToDelete: (Player string | number)) → BlacklistResponse | InfoResponse ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#InfoResponse","content":"type InfoResponse = { success: boolean, message: string }  Deletes a blacklist from your api key.  ","version":null,"tagName":"h3"},{"title":"getBlacklists​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#getBlacklists","content":"since 0.6.0 &lt;/&gt; Ranking:getBlacklists(userId: (string | number | Player )?) → BlacklistResponse | UserBlacklistResponse ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#UserBlacklistResponse","content":"type UserBlacklistResponse = { isUserBlacklisted: boolean, success: boolean, [any]: any }  Gets either a full list of blacklists or checks if a player is currently blacklisted.  ","version":null,"tagName":"h3"},{"title":"isUserBlacklisted​","type":1,"pageTitle":"Ranking","url":"/Vibez-Ranking/api/Ranking#isUserBlacklisted","content":"since 0.6.0 &lt;/&gt; Ranking:isUserBlacklisted(User: Player | string | number) → ( boolean, string?, string? ) Gets either a full list of blacklists or checks if a player is currently blacklisted. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}